#include <iostream>
#include <list>
using namespace std;
#include <vector>

class Graph {
private:
    int V; // Number of vertices
    list<int> *adjList; // Pointer to an array containing adjacency lists

public:
    Graph(int vertices) {
    this->V = vertices;
    adjList = new list<int>[vertices];
}

void addEdge(int v, int w) {
    adjList[v].push_back(w);
    adjList[w].push_back(v); // Assuming an undirected graph
}

void printGraph() {
    for (int i = 0; i < V; ++i) {
        cout << "Adjacency list of vertex " << i << ": ";
        for (const auto& neighbor : adjList[i]) {
            cout << neighbor << "->";
        }
        cout << endl;
    }
}
bool isConnected() {
    vector<bool> visited(V, false);
    
    // Start DFS from the first vertex
    DFS(0, visited);

    // Check if all vertices are visited
    for (bool v : visited) {
        if (!v) {
            return false; // If any vertex is not visited, the graph is not connected
        }
    }

    return true;
}

void DFS(int v, vector<bool>& visited) {
    visited[v] = true;

    for (const auto& neighbor : adjList[v]) {
        if (!visited[neighbor]) {
            DFS(neighbor, visited);
        }
    }
}
};
int main() {
    
    int vertices;
    cout<<"Enter number of vertices in the graph: ";
    cin>>vertices;
    Graph g(vertices);
    int edge,v,w;
    // Add edges
    cout<<"Enter number of edges:";
    cin>>edge;
    for(int j=0;j<edge;j++)
    {
        cout<<"Edge from: ";
        cin>>v;
        cout<<"Edge to: ";
        cin>>w;
        if(w>=vertices|| v>=vertices)
        {
            cout<<"Vertice not in the range"<<endl;
            break;
        }
        g.addEdge(v,w);
    }
    

    // Print the adjacency list
    g.printGraph();
    if (g.isConnected()) {
        cout << "The graph is connected." << endl;
    } else {
        cout << "The graph is not connected." << endl;
    }
    return 0;
}